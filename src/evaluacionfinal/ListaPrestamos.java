/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package evaluacionfinal;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.time.LocalDate;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author RAUL
 */
public class ListaPrestamos extends javax.swing.JFrame {
    public FrmAdmin frmMenu;
    
    public ListaPrestamos(FrmAdmin frmMenu) {
        try {
            initComponents();
            this.frmMenu=frmMenu;
            ArrayList<String> lineas=GestorArchivo.leerArchivo("Prestamos.txt");
            actualizarTabla(lineas);
        } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage(),"Aplicación para gestionar prestamos", 
                        JOptionPane.ERROR_MESSAGE);
        }   
    }
    public void actualizarTabla(ArrayList<String> lineas){
        DefaultTableModel contenidoTabla = (DefaultTableModel) tblPrestamos.getModel();
        contenidoTabla.setRowCount(0);
        for(String linea : lineas){
            Prestamo e = new Prestamo(linea);
           contenidoTabla.addRow(e.toArray());
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPrestamos = new javax.swing.JTable();
        btnAgregar = new javax.swing.JButton();
        btnDevolver = new javax.swing.JButton();
        btnConsultar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(51, 255, 51));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Prestamos");
        jLabel1.setToolTipText("");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(254, 254, 254)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)
        );

        tblPrestamos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Solicitante", "Fecha Prestamo", "Fecha Entrega", "Estado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPrestamos);

        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnDevolver.setText("Devolver");
        btnDevolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDevolverActionPerformed(evt);
            }
        });

        btnConsultar.setText("Consultar");
        btnConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(160, Short.MAX_VALUE)
                .addComponent(btnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(btnDevolver, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(btnConsultar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(210, 210, 210))
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 712, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnDevolver, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                    .addComponent(btnAgregar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnConsultar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnConsultarActionPerformed

    private void btnDevolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDevolverActionPerformed
    int indice = tblPrestamos.getSelectedRow();
    if (indice != -1) {
        DefaultTableModel modelo = (DefaultTableModel) tblPrestamos.getModel();
        String solicitante = (String) modelo.getValueAt(indice, 0);
        String fechaPrestamo = modelo.getValueAt(indice, 1).toString();
        String fechaEntrega = modelo.getValueAt(indice, 2).toString();

        int confirmacion = JOptionPane.showConfirmDialog(this, 
            "¿Estás seguro de que deseas marcar este préstamo como devuelto?",
            "Confirmar devolución", 
            JOptionPane.YES_NO_OPTION);

        if (confirmacion == JOptionPane.YES_OPTION) {
            try {
                ArrayList<String> lineas = GestorArchivo.leerArchivo("Prestamos.txt");
                ArrayList<String> nuevasLineas = new ArrayList<>();
                for (int i = 0; i < lineas.size(); i++) {
                    String linea = lineas.get(i);
                    Prestamo prestamo = new Prestamo(linea);
                    if (prestamo.getSolicitante().getNombre().equals(solicitante)
                            && prestamo.getFechaPrestamo().toString().equals(fechaPrestamo)
                            && prestamo.getFechaDev().toString().equals(fechaEntrega)) {
                        LocalDate fecha = LocalDate.now();
                        prestamo.devolverLibros();
                        modelo.setValueAt(fecha, indice, 2); // Actualizar la columna de devolución

                        // Devolver libros
                        for (Libro libro : prestamo.getLibrosPrestados()) {
                            devolverLibro(libro.getNombre());
                        }
                        nuevasLineas.add(prestamo.toString());
                    } else {
                        nuevasLineas.add(linea);
                    }
                }
                GestorArchivo.reemplazarArchivo("Prestamos.txt", nuevasLineas);
                actualizarTabla(nuevasLineas);
                
                JOptionPane.showMessageDialog(this, "Préstamo devuelto con éxito.",
                        "Gestión de préstamos", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(),
                        "Error al guardar los cambios", JOptionPane.ERROR_MESSAGE);
            }
        }
    } else {
        JOptionPane.showMessageDialog(this, "Selecciona un préstamo para devolver.", 
                "Gestión de préstamos", JOptionPane.WARNING_MESSAGE);
    }

        
        
        /*
        int indice = tblPrestamos.getSelectedRow();
        if (indice >= 0){
        //todo el codigo para devolver libros considerando que si un préstamo se devuelve, deberá marcarse el préstamo y además se deberá actualizar la disponibilidad de cada libro incluido en él.
            DefaultTableModel model = (DefaultTableModel) tblPrestamos.getModel(); 
            String solicitante = (String) model.getValueAt(indice, 0); 
            String fechaPrestamo = model.getValueAt(indice, 1).toString(); 
            String devolucion = model.getValueAt(indice, 2).toString();
            try { 
                ArrayList<String> lineas = GestorArchivo.leerArchivo("Prestamos.txt"); 
                ArrayList<String> nuevasLineas = new ArrayList<>(); 
                for (String linea : lineas) { 
                    Prestamo prestamo = new Prestamo(linea); 
                    if (prestamo.getSolicitante().getNombre().equals(solicitante) 
                            && prestamo.getFechaPrestamo().toString().equals(fechaPrestamo) 
                            && prestamo.getFechaDev().equals(devolucion)) { 
                        //prestamo.devolverLibro();  
                        actualizarLibros(prestamo.getLibrosPrestados()); 
                        nuevasLineas.add(prestamo.toString()); 
                    } else { 
                        nuevasLineas.add(linea); 
                    } 
                } 
                //GestorArchivo.reemplazarLinea("Prestamos.txt", nuevasLineas); 
                actualizarTabla(nuevasLineas); 
            } catch (Exception ex) { 
                JOptionPane.showMessageDialog(null, "Error al devolver los libros: " + ex.getMessage(), 
                        "Error", JOptionPane.ERROR_MESSAGE); }
        }
        */
    }//GEN-LAST:event_btnDevolverActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        //Enviamos la referencia a this
        FrmSolicitud frm = new FrmSolicitud(this);
        //mostramos el form de edición
        frm.setVisible(true);
        //ocultamos el form actual
        this.setVisible(false);
    }//GEN-LAST:event_btnAgregarActionPerformed
    
    private void actualizarLibros(ArrayList<Libro> librosPrestados) { 
        try { 
            ArrayList<String> lineas = GestorArchivo.leerArchivo("Libros.txt"); 
            ArrayList<String> nuevasLineas = new ArrayList<>(); 
            for (String linea : lineas) { 
                Libro libro = new Libro(linea); 
                for (Libro prestado : librosPrestados) { 
                    if (libro.getNombre().equals(prestado.getNombre())) { 
                        libro.setDisponible("Disponible"); } } nuevasLineas.add(libro.toString()); 
            } 
            try (BufferedWriter writer = new BufferedWriter(new FileWriter("Libros.txt"))) { 
                for (String nuevaLinea : nuevasLineas) { 
                    writer.write(nuevaLinea + "\n"); 
                } 
            } 
        } catch (Exception ex) { 
            JOptionPane.showMessageDialog(null, "Error al actualizar los libros: " + ex.getMessage(), 
                    "Error", JOptionPane.ERROR_MESSAGE); 
        } 
    }
    
    private void devolverLibro(String libroDevuelto) {
        try {
            ArrayList<String> libros = GestorArchivo.leerArchivo("Libros.txt");
            boolean libroEncontrado = false;

            for (int i = 0; i < libros.size(); i++) {
                Libro o = new Libro(libros.get(i));
                if (o.getNombre().equals(libroDevuelto)) {
                    o.setDisponible("Disponible");
                    libros.set(i, o.toString());
                    libroEncontrado = true;
                    GestorArchivo.reemplazarLinea("Libros.txt", i, o.toString());
                    break;
                }
            }
            if (!libroEncontrado) {
                JOptionPane.showMessageDialog(this, "El libro no se encontró en el sistema.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            JOptionPane.showMessageDialog(this, "El libro ha sido devuelto correctamente y está disponible para otros préstamos.", "Éxito", JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Ocurrió un error al devolver el libro: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListaPrestamos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListaPrestamos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListaPrestamos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListaPrestamos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new ListaPrestamos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnConsultar;
    private javax.swing.JButton btnDevolver;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblPrestamos;
    // End of variables declaration//GEN-END:variables
}
